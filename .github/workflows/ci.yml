name: CI
on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  build-test:
    name: Build and Test (${{ matrix.os }} / ${{ matrix.compiler }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-latest, compiler: gcc-13 }
          - { os: ubuntu-latest, compiler: clang-18 }
          - { os: macos-14, compiler: apple-clang }
          - { os: windows-2022, compiler: msvc }
    steps:
      - uses: actions/checkout@v4
      - name: Set up compiler
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          cmake: true
          ninja: true
      - name: Configure (Release with warnings as errors)
        shell: bash
        run: cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=RelWithDebInfo -DLIBSTATS_VERBOSE_BUILD=ON -DCMAKE_CXX_FLAGS="-Werror"
      - name: Build
        shell: bash
        run: cmake --build build -j
      - name: Tests
        shell: bash
        run: ctest --test-dir build --output-on-failure

  sanitizers:
    name: Sanitizers (Linux/Clang)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
        with:
          compiler: clang-18
          cmake: true
          ninja: true
      - name: Configure (ASAN/UBSAN)
        shell: bash
        run: cmake -S . -B build-asan -G Ninja -DCMAKE_BUILD_TYPE=Debug -DLIBSTATS_VERBOSE_BUILD=ON -DCMAKE_CXX_FLAGS="-fsanitize=address,undefined -fno-omit-frame-pointer -O1" -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=address,undefined"
      - name: Build
        shell: bash
        run: cmake --build build-asan -j
      - name: Tests
        shell: bash
        run: ctest --test-dir build-asan --output-on-failure

  thread-sanitizer:
    name: ThreadSanitizer (Linux/Clang)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
        with:
          compiler: clang-18
          cmake: true
          ninja: true
      - name: Configure (TSAN)
        shell: bash
        run: cmake -S . -B build-tsan -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="-fsanitize=thread -fno-omit-frame-pointer -O1" -DCMAKE_EXE_LINKER_FLAGS="-fsanitize=thread"
      - name: Build
        shell: bash
        run: cmake --build build-tsan -j
      - name: Tests
        shell: bash
        run: ctest --test-dir build-tsan --output-on-failure

  coverage:
    name: Coverage (Linux/GCC)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aminya/setup-cpp@v1
        with:
          compiler: gcc-13
          cmake: true
          ninja: true
      - name: Configure (coverage)
        shell: bash
        run: cmake -S . -B build-cov -G Ninja -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage -O0" -DCMAKE_EXE_LINKER_FLAGS="--coverage"
      - name: Build
        shell: bash
        run: cmake --build build-cov -j
      - name: Tests
        shell: bash
        run: ctest --test-dir build-cov --output-on-failure
      - name: Upload coverage (lcov)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: build-cov

  lint:
    name: Lint (clang-format/clang-tidy)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: clang-format check
        run: |
          git ls-files '*.h' '*.hpp' '*.cpp' | xargs -I{} clang-format -n --Werror {}
      - name: clang-tidy (build config)
        shell: bash
        run: |
          cmake -S . -B build-tidy -G Ninja -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          run-clang-tidy -p build-tidy
