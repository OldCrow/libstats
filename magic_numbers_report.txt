Magic Numbers Report - Generated Sat 30 Aug 2025 18:23:11 EDT
=======================================

=== Floating-Point Literals ===

src//validation.cpp:125 - Value: 7.0 (uncategorized)
  Context:     static const double g = 7.0;

src//validation.cpp:127 - Value: 0.99999999999980993 (uncategorized)
  Context:         0.99999999999980993,  676.5203681218851,     -1259.1392167224028,

src//validation.cpp:127 - Value: 676.5203681218851 (uncategorized)
  Context:         0.99999999999980993,  676.5203681218851,     -1259.1392167224028,

src//validation.cpp:127 - Value: 1259.1392167224028 (uncategorized)
  Context:         0.99999999999980993,  676.5203681218851,     -1259.1392167224028,

src//validation.cpp:128 - Value: 771.32342877765313 (uncategorized)
  Context:         771.32342877765313,   -176.61502916214059,   12.507343278686905,

src//validation.cpp:128 - Value: 176.61502916214059 (uncategorized)
  Context:         771.32342877765313,   -176.61502916214059,   12.507343278686905,

src//validation.cpp:128 - Value: 12.507343278686905 (uncategorized)
  Context:         771.32342877765313,   -176.61502916214059,   12.507343278686905,

src//validation.cpp:129 - Value: 0.13857109526572012 (uncategorized)
  Context:         -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7};

src//validation.cpp:295 - Value: 0.27 (uncategorized)
  Context:         if (z < 0.27) {

src//validation.cpp:326 - Value: 0.576 (uncategorized)
  Context:         0.576,  // α = 0.50

src//validation.cpp:326 - Value: 0.50 (uncategorized)
  Context:         0.576,  // α = 0.50

src//validation.cpp:327 - Value: 0.656 (uncategorized)
  Context:         0.656,  // α = 0.40

src//validation.cpp:327 - Value: 0.40 (uncategorized)
  Context:         0.656,  // α = 0.40

src//validation.cpp:328 - Value: 0.787 (uncategorized)
  Context:         0.787,  // α = 0.30

src//validation.cpp:328 - Value: 0.30 (uncategorized)
  Context:         0.787,  // α = 0.30

src//validation.cpp:329 - Value: 1.248 (uncategorized)
  Context:         1.248,  // α = detail::QUARTER

src//validation.cpp:330 - Value: 1.610 (uncategorized)
  Context:         1.610,  // α = 0.15

src//validation.cpp:330 - Value: 0.15 (uncategorized)
  Context:         1.610,  // α = 0.15

src//validation.cpp:331 - Value: 1.933 (uncategorized)
  Context:         1.933,  // α = detail::ALPHA_10

src//validation.cpp:332 - Value: 2.492 (uncategorized)
  Context:         2.492,  // α = detail::ALPHA_05

src//validation.cpp:333 - Value: 3.070 (uncategorized)
  Context:         3.070,  // α = 0.025

src//validation.cpp:333 - Value: 0.025 (uncategorized)
  Context:         3.070,  // α = 0.025

src//validation.cpp:334 - Value: 3.857 (uncategorized)
  Context:         3.857,  // α = detail::ALPHA_01

src//validation.cpp:335 - Value: 4.500 (uncategorized)
  Context:         4.500   // α = 0.005

src//validation.cpp:335 - Value: 0.005 (uncategorized)
  Context:         4.500   // α = 0.005

src//validation.cpp:338 - Value: 0.50 (uncategorized)
  Context:     static const double extended_significance_levels[] = {0.50, 0.40, 0.30,  detail::QUARTER, 0.15,

src//validation.cpp:338 - Value: 0.40 (uncategorized)
  Context:     static const double extended_significance_levels[] = {0.50, 0.40, 0.30,  detail::QUARTER, 0.15,

src//validation.cpp:338 - Value: 0.30 (uncategorized)
  Context:     static const double extended_significance_levels[] = {0.50, 0.40, 0.30,  detail::QUARTER, 0.15,

src//validation.cpp:338 - Value: 0.15 (uncategorized)
  Context:     static const double extended_significance_levels[] = {0.50, 0.40, 0.30,  detail::QUARTER, 0.15,

src//validation.cpp:339 - Value: 0.025 (uncategorized)
  Context:                                                           detail::ALPHA_10, detail::ALPHA_05, 0.025, detail::ALPHA_01, 0.005};

src//validation.cpp:339 - Value: 0.005 (uncategorized)
  Context:                                                           detail::ALPHA_10, detail::ALPHA_05, 0.025, detail::ALPHA_01, 0.005};

src//validation.cpp:460 - Value: 2.25 (uncategorized)
  Context:                         2.25 / (static_cast<double>(n) * static_cast<double>(n)));

src//performance_history.cpp:333 - Value: 1.05 (uncategorized)
  Context:                 if (improvement_ratio > 1.05) {

src//performance_history.cpp:351 - Value: 1.1 (uncategorized)
  Context:     constexpr double MIN_IMPROVEMENT_RATIO = 1.1;  // Require 10% improvement

src//gamma.cpp:542 - Value: 2.706 (uncategorized)
  Context:         chi2_critical = 2.706;

src//gamma.cpp:583 - Value: 2.706 (uncategorized)
  Context:         chi2_critical = 2.706;

src//gamma.cpp:653 - Value: 4.605 (uncategorized)
  Context:         chi2_critical = 4.605;

src//gamma.cpp:991 - Value: 1.36 (uncategorized)
  Context:     double critical_value = 1.36 / std::sqrt(n);  // Approximation for KS test critical value

src//gamma.cpp:999 - Value: 0.27 (uncategorized)
  Context:     if (lambda < 0.27) {

src//gamma.cpp:1007 - Value: 8.0 (uncategorized)
  Context:         double correction = detail::ONE - detail::TWO * lambda * lambda / detail::THREE + 8.0 * std::pow(lambda, 4) / 15.0;

src//gamma.cpp:1007 - Value: 15.0 (uncategorized)
  Context:         double correction = detail::ONE - detail::TWO * lambda * lambda / detail::THREE + 8.0 * std::pow(lambda, 4) / 15.0;

src//gamma.cpp:1032 - Value: 2.25 (uncategorized)
  Context:     const double modified_stat = ad_statistic * (detail::ONE + detail::AD_P_VALUE_MEDIUM / n + 2.25 / (n * n));

src//gamma.cpp:1036 - Value: 13.0 (uncategorized)
  Context:     if (modified_stat >= 13.0) {

src//gamma.cpp:1039 - Value: 1.28 (uncategorized)
  Context:         p_value = std::exp(-1.28 * modified_stat);

src//gamma.cpp:1041 - Value: 1.8 (uncategorized)
  Context:         p_value = std::exp(-1.8 * modified_stat + 1.5);

src//gamma.cpp:1041 - Value: 1.5 (uncategorized)
  Context:         p_value = std::exp(-1.8 * modified_stat + 1.5);

src//gamma.cpp:2690 - Value: 0.1 (uncategorized)
  Context:         x = std::max(x - delta, x * 0.1);  // Ensure x stays positive

src//gamma.cpp:2722 - Value: 0.0331 (uncategorized)
  Context:         if (u < detail::ONE - 0.0331 * (x * x) * (x * x)) {

src//gamma.cpp:2794 - Value: 24.0 (uncategorized)
  Context:     double alpha_est = (detail::THREE - s + std::sqrt((s - detail::THREE) * (s - detail::THREE) + 24.0 * s)) / (12.0 * s);

src//gamma.cpp:2794 - Value: 12.0 (uncategorized)
  Context:     double alpha_est = (detail::THREE - s + std::sqrt((s - detail::THREE) * (s - detail::THREE) + 24.0 * s)) / (12.0 * s);

src//gamma.cpp:2844 - Value: 8.0 (uncategorized)
  Context:     while (z < 8.0) {

src//gamma.cpp:2855 - Value: 12.0 (uncategorized)
  Context:     result -= z_inv_sq / 12.0;                         // Bernoulli B₂/2

src//gamma.cpp:2856 - Value: 120.0 (uncategorized)
  Context:     result += z_inv_sq * z_inv_sq / 120.0;             // Bernoulli B₄/4

src//gamma.cpp:2857 - Value: 252.0 (uncategorized)
  Context:     result -= z_inv_sq * z_inv_sq * z_inv_sq / 252.0;  // Bernoulli B₆/6

src//gamma.cpp:2874 - Value: 8.0 (uncategorized)
  Context:     while (z < 8.0) {

src//gamma.cpp:2886 - Value: 30.0 (uncategorized)
  Context:     result -= z_inv_sq * z_inv_sq * z_inv / 30.0;             // -1/(30z⁵)

src//gamma.cpp:2887 - Value: 42.0 (uncategorized)
  Context:     result += z_inv_sq * z_inv_sq * z_inv_sq * z_inv / 42.0;  // 1/(42z⁷)

src//uniform.cpp:786 - Value: 12.0 (uncategorized)
  Context:     const double range_estimate = std::sqrt(12.0 * variance);

src//uniform.cpp:906 - Value: 12.0 (uncategorized)
  Context:     const double expected_variance = sample_range * sample_range / 12.0;

src//uniform.cpp:967 - Value: 3.857 (uncategorized)
  Context:         critical_value = 3.857;

src//uniform.cpp:969 - Value: 2.492 (uncategorized)
  Context:         critical_value = 2.492;

src//uniform.cpp:971 - Value: 1.933 (uncategorized)
  Context:         critical_value = 1.933;

src//uniform.cpp:973 - Value: 1.159 (uncategorized)
  Context:         critical_value = 1.159;  // alpha = detail::QUARTER

src//uniform.cpp:980 - Value: 1.2804 (uncategorized)
  Context:         p_value = detail::ONE - std::exp(-1.2804 * std::pow(ad_stat, -detail::HALF));

src//uniform.cpp:981 - Value: 0.34 (uncategorized)
  Context:     } else if (ad_stat < 0.34) {

src//uniform.cpp:982 - Value: 0.26 (uncategorized)
  Context:         p_value = detail::ONE - std::exp(-detail::LARGE_EFFECT * ad_stat - 0.26);

src//uniform.cpp:983 - Value: 0.6 (uncategorized)
  Context:     } else if (ad_stat < 0.6) {

src//uniform.cpp:984 - Value: 0.9 (uncategorized)
  Context:         p_value = std::exp(-0.9 * ad_stat - 0.16);

src//uniform.cpp:984 - Value: 0.16 (uncategorized)
  Context:         p_value = std::exp(-0.9 * ad_stat - 0.16);

src//uniform.cpp:986 - Value: 1.8 (uncategorized)
  Context:         p_value = std::exp(-1.8 * ad_stat + 0.258);

src//uniform.cpp:986 - Value: 0.258 (uncategorized)
  Context:         p_value = std::exp(-1.8 * ad_stat + 0.258);

src//uniform.cpp:1080 - Value: 1000.0 (uncategorized)
  Context:                 std::isfinite(log_prob) ? log_prob : -1000.0;  // Penalty for out-of-bounds

src//uniform.cpp:1147 - Value: 1000.0 (uncategorized)
  Context:             std::isfinite(log_prob) ? log_prob : -1000.0;  // Penalty for out-of-bounds

src//uniform.cpp:1186 - Value: 1000.0 (uncategorized)
  Context:             log_likelihood += -1000.0;

src//system_capabilities.cpp:23 - Value: 1.5 (uncategorized)
  Context:     std::vector<double> data(BENCHMARK_ARRAY_SIZE, 1.5);

src//system_capabilities.cpp:41 - Value: 10.0 (uncategorized)
  Context:     return std::min(detail::ONE, 10.0 / std::max(detail::ONE, time_per_operation));

src//system_capabilities.cpp:109 - Value: 25.0 (uncategorized)
  Context:         return 25.0;  // Reasonable fallback for DDR3-1600 dual channel

src//platform_constants_impl.cpp:462 - Value: 1.5 (uncategorized)
  Context:         return static_cast<std::size_t>(std::round(static_cast<double>(base_grain) * 1.5));

src//discrete.cpp:936 - Value: 12.0 (uncategorized)
  Context:     const double range_estimate = std::sqrt(12.0 * sample_variance);

src//discrete.cpp:968 - Value: 4.0 (uncategorized)
  Context:         (posterior_a_interval.second - posterior_a_interval.first) / 4.0;  // rough estimate

src//discrete.cpp:974 - Value: 4.0 (uncategorized)
  Context:         (posterior_b_interval.second - posterior_b_interval.first) / 4.0;  // rough estimate

src//discrete.cpp:1111 - Value: 0.27 (uncategorized)
  Context:     if (lambda < 0.27) {

src//discrete.cpp:1119 - Value: 8.0 (uncategorized)
  Context:         double correction = detail::ONE - detail::TWO * lambda * lambda / detail::THREE + 8.0 * std::pow(lambda, 4) / 15.0;

src//discrete.cpp:1119 - Value: 15.0 (uncategorized)
  Context:         double correction = detail::ONE - detail::TWO * lambda * lambda / detail::THREE + 8.0 * std::pow(lambda, 4) / 15.0;

src//discrete.cpp:1147 - Value: 3.857 (uncategorized)
  Context:         critical_value = 3.857;

src//discrete.cpp:1149 - Value: 2.492 (uncategorized)
  Context:         critical_value = 2.492;

src//discrete.cpp:1151 - Value: 1.933 (uncategorized)
  Context:         critical_value = 1.933;

src//discrete.cpp:1153 - Value: 1.159 (uncategorized)
  Context:         critical_value = 1.159;  // alpha = detail::QUARTER

src//discrete.cpp:1159 - Value: 1.2337 (uncategorized)
  Context:         p_value = detail::ONE - std::exp(-1.2337 * std::pow(ad_statistic, -detail::ONE) + detail::ONE);

src//discrete.cpp:1234 - Value: 0.025 (uncategorized)
  Context:         p_value = (z_score > detail::Z_95) ? 0.025 : detail::AD_THRESHOLD_1;  // Very rough normal approximation

src//benchmark.cpp:176 - Value: 1.05 (uncategorized)
  Context:             if (speedup > 1.05) {

src//benchmark.cpp:597 - Value: 1.5 (uncategorized)
  Context:         iterations = static_cast<std::size_t>(static_cast<double>(iterations) * 1.5);

src//benchmark.cpp:598 - Value: 1.2 (uncategorized)
  Context:         warmupRuns = static_cast<std::size_t>(static_cast<double>(warmupRuns) * 1.2);

src//benchmark.cpp:608 - Value: 1.2 (uncategorized)
  Context:         iterations = static_cast<std::size_t>(static_cast<double>(iterations) * 1.2);

src//benchmark.cpp:611 - Value: 0.9 (uncategorized)
  Context:         iterations = static_cast<std::size_t>(static_cast<double>(iterations) * 0.9);

src//benchmark.cpp:617 - Value: 1.3 (uncategorized)
  Context:         warmupRuns = static_cast<std::size_t>(static_cast<double>(warmupRuns) * 1.3);

src//gaussian.cpp:1267 - Value: 1.5 (uncategorized)
  Context:     const double skewness = m3 / std::pow(m2, 1.5);

src//gaussian.cpp:3014 - Value: 0.0625 (uncategorized)
  Context:     isLowVariance_ = cachedSigmaSquared_ < 0.0625;  // σ² < 1/16

src//parallel_thresholds.cpp:27 - Value: 0.85 (uncategorized)
  Context:     profile.thread_efficiency_factor = 0.85;

src//poisson.cpp:1027 - Value: 0.27 (uncategorized)
  Context:     if (lambda_ks < 0.27) {

src//poisson.cpp:1076 - Value: 1.2337 (uncategorized)
  Context:         p_value = detail::ONE - std::exp(-1.2337 * std::pow(ad_statistic, -detail::ONE) + detail::ONE);

src//distribution_base.cpp:368 - Value: 15.0 (uncategorized)
  Context:     if (std::abs(combined - whole) < 15.0 * tolerance) {

src//distribution_base.cpp:369 - Value: 15.0 (uncategorized)
  Context:         return combined + (combined - whole) / 15.0;  // Richardson extrapolation

src//exponential.cpp:947 - Value: 0.6 (uncategorized)
  Context:     const double ad_adjusted = ad_statistic * (detail::ONE + 0.6 / n_double);

src//exponential.cpp:955 - Value: 13.436 (uncategorized)
  Context:                   std::exp(-13.436 + 101.14 * ad_adjusted - 223.73 * ad_adjusted * ad_adjusted);

src//exponential.cpp:955 - Value: 101.14 (uncategorized)
  Context:                   std::exp(-13.436 + 101.14 * ad_adjusted - 223.73 * ad_adjusted * ad_adjusted);

src//exponential.cpp:955 - Value: 223.73 (uncategorized)
  Context:                   std::exp(-13.436 + 101.14 * ad_adjusted - 223.73 * ad_adjusted * ad_adjusted);

src//exponential.cpp:956 - Value: 0.34 (uncategorized)
  Context:     } else if (ad_adjusted < 0.34) {

src//exponential.cpp:958 - Value: 8.318 (uncategorized)
  Context:                   std::exp(-8.318 + 42.796 * ad_adjusted - 59.938 * ad_adjusted * ad_adjusted);

src//exponential.cpp:958 - Value: 42.796 (uncategorized)
  Context:                   std::exp(-8.318 + 42.796 * ad_adjusted - 59.938 * ad_adjusted * ad_adjusted);

src//exponential.cpp:958 - Value: 59.938 (uncategorized)
  Context:                   std::exp(-8.318 + 42.796 * ad_adjusted - 59.938 * ad_adjusted * ad_adjusted);

src//exponential.cpp:959 - Value: 0.6 (uncategorized)
  Context:     } else if (ad_adjusted < 0.6) {

src//exponential.cpp:960 - Value: 0.9177 (uncategorized)
  Context:         p_value = std::exp(0.9177 - 4.279 * ad_adjusted - 1.38 * ad_adjusted * ad_adjusted);

src//exponential.cpp:960 - Value: 4.279 (uncategorized)
  Context:         p_value = std::exp(0.9177 - 4.279 * ad_adjusted - 1.38 * ad_adjusted * ad_adjusted);

src//exponential.cpp:960 - Value: 1.38 (uncategorized)
  Context:         p_value = std::exp(0.9177 - 4.279 * ad_adjusted - 1.38 * ad_adjusted * ad_adjusted);

src//exponential.cpp:962 - Value: 1.2937 (uncategorized)
  Context:         p_value = std::exp(1.2937 - 5.709 * ad_adjusted + 0.0186 * ad_adjusted * ad_adjusted);

src//exponential.cpp:962 - Value: 5.709 (uncategorized)
  Context:         p_value = std::exp(1.2937 - 5.709 * ad_adjusted + 0.0186 * ad_adjusted * ad_adjusted);

src//exponential.cpp:962 - Value: 0.0186 (uncategorized)
  Context:         p_value = std::exp(1.2937 - 5.709 * ad_adjusted + 0.0186 * ad_adjusted * ad_adjusted);

src//math_utils.cpp:58 - Value: 2.50662823884 (uncategorized)
  Context:     static const double a0 = 2.50662823884;

src//math_utils.cpp:59 - Value: 18.61500062529 (uncategorized)
  Context:     static const double a1 = -18.61500062529;

src//math_utils.cpp:60 - Value: 41.39119773534 (uncategorized)
  Context:     static const double a2 = 41.39119773534;

src//math_utils.cpp:61 - Value: 25.44106049637 (uncategorized)
  Context:     static const double a3 = -25.44106049637;

src//math_utils.cpp:63 - Value: 8.47351093090 (uncategorized)
  Context:     static const double b0 = -8.47351093090;

src//math_utils.cpp:64 - Value: 23.08336743743 (uncategorized)
  Context:     static const double b1 = 23.08336743743;

src//math_utils.cpp:65 - Value: 21.06224101826 (uncategorized)
  Context:     static const double b2 = -21.06224101826;

src//math_utils.cpp:66 - Value: 3.13082909833 (uncategorized)
  Context:     static const double b3 = 3.13082909833;

src//math_utils.cpp:82 - Value: 2.515517 (uncategorized)
  Context:         static const double d0 = 2.515517;

src//math_utils.cpp:83 - Value: 0.802853 (uncategorized)
  Context:         static const double d1 = 0.802853;

src//math_utils.cpp:84 - Value: 0.010328 (uncategorized)
  Context:         static const double d2 = 0.010328;

src//math_utils.cpp:85 - Value: 1.432788 (uncategorized)
  Context:         static const double e1 = 1.432788;

src//math_utils.cpp:86 - Value: 0.189269 (uncategorized)
  Context:         static const double e2 = 0.189269;

src//math_utils.cpp:87 - Value: 0.001308 (uncategorized)
  Context:         static const double e3 = 0.001308;

src//math_utils.cpp:113 - Value: 8.0 (uncategorized)
  Context:                                       (8.0 * sqrt_log_eps * sqrt_log_eps * sqrt_log_eps);

src//math_utils.cpp:121 - Value: 2.515517 (uncategorized)
  Context:             static const double d0 = 2.515517;

src//math_utils.cpp:122 - Value: 0.802853 (uncategorized)
  Context:             static const double d1 = 0.802853;

src//math_utils.cpp:123 - Value: 0.010328 (uncategorized)
  Context:             static const double d2 = 0.010328;

src//math_utils.cpp:124 - Value: 1.432788 (uncategorized)
  Context:             static const double e0 = 1.432788;

src//math_utils.cpp:125 - Value: 0.189269 (uncategorized)
  Context:             static const double e1 = 0.189269;

src//math_utils.cpp:126 - Value: 0.001308 (uncategorized)
  Context:             static const double e2 = 0.001308;

src//math_utils.cpp:710 - Value: 1000.0 (uncategorized)
  Context:     if (df >= 1000.0) {

src//math_utils.cpp:812 - Value: 0.1 (uncategorized)
  Context:     if (p < 0.1 || p > 0.9) {

src//math_utils.cpp:812 - Value: 0.9 (uncategorized)
  Context:     if (p < 0.1 || p > 0.9) {

src//math_utils.cpp:815 - Value: 10.0 (uncategorized)
  Context:         double high = df + 10.0 * std::sqrt(df);  // Conservative upper bound

src//math_utils.cpp:875 - Value: 10.0 (uncategorized)
  Context:         if (x > df + 10.0 * std::sqrt(df) || !std::isfinite(x)) {

src//math_utils.cpp:878 - Value: 10.0 (uncategorized)
  Context:             double high = df + 10.0 * std::sqrt(df);

src//math_utils.cpp:1016 - Value: 0.1 (uncategorized)
  Context:     if (p < 0.1 || p > 0.9) {

src//math_utils.cpp:1016 - Value: 0.9 (uncategorized)
  Context:     if (p < 0.1 || p > 0.9) {

src//math_utils.cpp:1018 - Value: 10.0 (uncategorized)
  Context:         double high = mean + 10.0 * std::sqrt(variance);  // Conservative upper bound

src//math_utils.cpp:1070 - Value: 10.0 (uncategorized)
  Context:         if (x > mean + 10.0 * std::sqrt(variance) || !std::isfinite(x)) {

src//math_utils.cpp:1073 - Value: 10.0 (uncategorized)
  Context:             double high = mean + 10.0 * std::sqrt(variance);

src//performance_dispatcher.cpp:125 - Value: 50.0 (uncategorized)
  Context:     return batch_size >= thresholds_.gpu_accelerated_min && system.memory_bandwidth_gb_s() >= 50.0;

src//performance_dispatcher.cpp:176 - Value: 1000000.0 (uncategorized)
  Context:             threading_overhead < (1000000.0 * dist_chars.base_complexity)) {

src//performance_dispatcher.cpp:178 - Value: 0.6 (uncategorized)
  Context:             return (dist_chars.parallelization_efficiency > 0.6) ? Strategy::PARALLEL_SIMD

src//performance_dispatcher.cpp:187 - Value: 0.6 (uncategorized)
  Context:         if (effective_simd_efficiency > detail::HALF && dist_chars.vectorization_efficiency > 0.6) {

src//performance_dispatcher.cpp:197 - Value: 200000.0 (uncategorized)
  Context:     double acceptable_overhead = 200000.0 * dist_chars.base_complexity;  // Scale by complexity

src//performance_dispatcher.cpp:200 - Value: 0.4 (uncategorized)
  Context:         if (effective_simd_efficiency > 0.4) {

src//performance_dispatcher.cpp:209 - Value: 50.0 (uncategorized)
  Context:                               (memory_bandwidth >= 50.0) &&

src//performance_dispatcher.cpp:221 - Value: 1.2 (uncategorized)
  Context:         (dist_chars.branch_prediction_cost > 1.2);  // High branching variability

src//performance_dispatcher.cpp:228 - Value: 0.6 (uncategorized)
  Context:     if (dist_chars.parallelization_efficiency > 0.6) {

src//performance_dispatcher.cpp:233 - Value: 0.4 (uncategorized)
  Context:     if (effective_simd_efficiency > 0.4) {

src//performance_dispatcher.cpp:400 - Value: 1.5 (uncategorized)
  Context:         simd_min = static_cast<size_t>(static_cast<double>(simd_min) * (1.5 / simd_efficiency));

src//performance_dispatcher.cpp:403 - Value: 1.5 (uncategorized)
  Context:         uniform_parallel_min = static_cast<size_t>(static_cast<double>(uniform_parallel_min) * 1.5);

src//performance_dispatcher.cpp:405 - Value: 1.5 (uncategorized)
  Context:             static_cast<size_t>(static_cast<double>(gaussian_parallel_min) * 1.5);

src//performance_dispatcher.cpp:407 - Value: 1.5 (uncategorized)
  Context:             static_cast<size_t>(static_cast<double>(exponential_parallel_min) * 1.5);

src//performance_dispatcher.cpp:409 - Value: 1.5 (uncategorized)
  Context:             static_cast<size_t>(static_cast<double>(discrete_parallel_min) * 1.5);

src//performance_dispatcher.cpp:410 - Value: 1.5 (uncategorized)
  Context:         poisson_parallel_min = static_cast<size_t>(static_cast<double>(poisson_parallel_min) * 1.5);

src//performance_dispatcher.cpp:411 - Value: 1.5 (uncategorized)
  Context:         gamma_parallel_min = static_cast<size_t>(static_cast<double>(gamma_parallel_min) * 1.5);

src//performance_dispatcher.cpp:412 - Value: 1.5 (uncategorized)
  Context:     } else if (simd_efficiency > 1.5) {

src//performance_dispatcher.cpp:429 - Value: 100000.0 (uncategorized)
  Context:     if (threading_overhead > 100000.0) {  // > 100μs overhead

src//performance_dispatcher.cpp:431 - Value: 50000.0 (uncategorized)
  Context:         double multiplier = std::min(detail::THREE, threading_overhead / 50000.0);

src//performance_dispatcher.cpp:449 - Value: 10000.0 (uncategorized)
  Context:     } else if (threading_overhead < 10000.0) {  // < 10μs overhead

src//performance_dispatcher.cpp:451 - Value: 20000.0 (uncategorized)
  Context:         double multiplier = std::max(detail::HALF, threading_overhead / 20000.0);

src//performance_dispatcher.cpp:472 - Value: 20.0 (uncategorized)
  Context:     if (memory_bandwidth < 20.0) {

src//performance_dispatcher.cpp:474 - Value: 1.5 (uncategorized)
  Context:         gpu_accelerated_min = static_cast<size_t>(static_cast<double>(gpu_accelerated_min) * 1.5);

=== Scientific Notation ===

src//validation.cpp:129 - Value: 9.9843695780195716e-6 (uncategorized)
  Context:         -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7};

src//validation.cpp:129 - Value: 1.5056327351493116e-7 (convergence_tolerance)
  Context:         -0.13857109526572012, 9.9843695780195716e-6, 1.5056327351493116e-7};

src//validation.cpp:189 - Value: 1e30 (uncategorized)
  Context:         double c = 1e30;

src//validation.cpp:542 - Value: 1e10 (uncategorized)
  Context:             log_likelihood += -1e10;  // Large negative penalty for zero density

src//system_capabilities.cpp:105 - Value: 1e9 (uncategorized)
  Context:     double seconds = static_cast<double>(duration.count()) / 1e9;

src//system_capabilities.cpp:112 - Value: 1e9 (uncategorized)
  Context:     double bandwidth = (bytes_transferred / seconds) / 1e9;  // GB/s

src//math_utils.cpp:110 - Value: 1e-15 (convergence_tolerance)
  Context:             if (eps > 1e-15) {

=== Integer Literals (>10) ===

src//performance_history.cpp:206 - Value: 128 (uncategorized)
  Context:     else if (batch_size <= 128)

src//performance_history.cpp:207 - Value: 128 (uncategorized)
  Context:         return 128;

src//performance_history.cpp:208 - Value: 160 (uncategorized)
  Context:     else if (batch_size <= 160)

src//performance_history.cpp:209 - Value: 160 (uncategorized)
  Context:         return 160;

src//performance_history.cpp:210 - Value: 200 (iteration_limit)
  Context:     else if (batch_size <= 200)

src//performance_history.cpp:211 - Value: 200 (iteration_limit)
  Context:         return 200;

src//performance_history.cpp:212 - Value: 250 (uncategorized)
  Context:     else if (batch_size <= 250)

src//performance_history.cpp:213 - Value: 250 (uncategorized)
  Context:         return 250;

src//performance_history.cpp:214 - Value: 320 (uncategorized)
  Context:     else if (batch_size <= 320)

src//performance_history.cpp:215 - Value: 320 (uncategorized)
  Context:         return 320;

src//performance_history.cpp:216 - Value: 400 (uncategorized)
  Context:     else if (batch_size <= 400)

src//performance_history.cpp:217 - Value: 400 (uncategorized)
  Context:         return 400;

src//performance_history.cpp:218 - Value: 500 (iteration_limit)
  Context:     else if (batch_size <= 500)

src//performance_history.cpp:219 - Value: 500 (iteration_limit)
  Context:         return 500;

src//performance_history.cpp:220 - Value: 640 (uncategorized)
  Context:     else if (batch_size <= 640)

src//performance_history.cpp:221 - Value: 640 (uncategorized)
  Context:         return 640;

src//performance_history.cpp:222 - Value: 800 (uncategorized)
  Context:     else if (batch_size <= 800)

src//performance_history.cpp:223 - Value: 800 (uncategorized)
  Context:         return 800;

src//performance_history.cpp:226 - Value: 1280 (uncategorized)
  Context:     else if (batch_size <= 1280)

src//performance_history.cpp:227 - Value: 1280 (uncategorized)
  Context:         return 1280;

src//performance_history.cpp:228 - Value: 1600 (uncategorized)
  Context:     else if (batch_size <= 1600)

src//performance_history.cpp:229 - Value: 1600 (uncategorized)
  Context:         return 1600;

src//performance_history.cpp:230 - Value: 2000 (uncategorized)
  Context:     else if (batch_size <= 2000)

src//performance_history.cpp:231 - Value: 2000 (uncategorized)
  Context:         return 2000;

src//performance_history.cpp:232 - Value: 2500 (uncategorized)
  Context:     else if (batch_size <= 2500)

src//performance_history.cpp:233 - Value: 2500 (uncategorized)
  Context:         return 2500;

src//performance_history.cpp:234 - Value: 3200 (uncategorized)
  Context:     else if (batch_size <= 3200)

src//performance_history.cpp:235 - Value: 3200 (uncategorized)
  Context:         return 3200;

src//performance_history.cpp:236 - Value: 4000 (uncategorized)
  Context:     else if (batch_size <= 4000)

src//performance_history.cpp:237 - Value: 4000 (uncategorized)
  Context:         return 4000;

src//performance_history.cpp:240 - Value: 6400 (uncategorized)
  Context:     else if (batch_size <= 6400)

src//performance_history.cpp:241 - Value: 6400 (uncategorized)
  Context:         return 6400;

src//performance_history.cpp:242 - Value: 8000 (uncategorized)
  Context:     else if (batch_size <= 8000)

src//performance_history.cpp:243 - Value: 8000 (uncategorized)
  Context:         return 8000;

src//performance_history.cpp:244 - Value: 10000 (uncategorized)
  Context:     else if (batch_size <= 10000)

src//performance_history.cpp:245 - Value: 10000 (uncategorized)
  Context:         return 10000;

src//performance_history.cpp:246 - Value: 12800 (uncategorized)
  Context:     else if (batch_size <= 12800)

src//performance_history.cpp:247 - Value: 12800 (uncategorized)
  Context:         return 12800;

src//performance_history.cpp:248 - Value: 16000 (uncategorized)
  Context:     else if (batch_size <= 16000)

src//performance_history.cpp:249 - Value: 16000 (uncategorized)
  Context:         return 16000;

src//performance_history.cpp:250 - Value: 20000 (uncategorized)
  Context:     else if (batch_size <= 20000)

src//performance_history.cpp:251 - Value: 20000 (uncategorized)
  Context:         return 20000;

src//performance_history.cpp:252 - Value: 25000 (uncategorized)
  Context:     else if (batch_size <= 25000)

src//performance_history.cpp:253 - Value: 25000 (uncategorized)
  Context:         return 25000;

src//performance_history.cpp:254 - Value: 32000 (uncategorized)
  Context:     else if (batch_size <= 32000)

src//performance_history.cpp:255 - Value: 32000 (uncategorized)
  Context:         return 32000;

src//performance_history.cpp:256 - Value: 40000 (uncategorized)
  Context:     else if (batch_size <= 40000)

src//performance_history.cpp:257 - Value: 40000 (uncategorized)
  Context:         return 40000;

src//performance_history.cpp:258 - Value: 50000 (uncategorized)
  Context:     else if (batch_size <= 50000)

src//performance_history.cpp:259 - Value: 50000 (uncategorized)
  Context:         return 50000;

src//performance_history.cpp:260 - Value: 64000 (uncategorized)
  Context:     else if (batch_size <= 64000)

src//performance_history.cpp:261 - Value: 64000 (uncategorized)
  Context:         return 64000;

src//performance_history.cpp:262 - Value: 80000 (uncategorized)
  Context:     else if (batch_size <= 80000)

src//performance_history.cpp:263 - Value: 80000 (uncategorized)
  Context:         return 80000;

src//performance_history.cpp:265 - Value: 100000 (uncategorized)
  Context:         return 100000;

src//performance_history.cpp:312 - Value: 10000 (uncategorized)
  Context:         fallback_threshold = 10000;

src//performance_history.cpp:314 - Value: 50000 (uncategorized)
  Context:         fallback_threshold = 50000;

src//gamma.cpp:1218 - Value: 100 (iteration_limit)
  Context:     if (n_bootstrap < 100) {

src//system_capabilities.cpp:19 - Value: 1024 (uncategorized)
  Context: constexpr size_t BENCHMARK_ARRAY_SIZE = 1024;

src//system_capabilities.cpp:73 - Value: 1024 (uncategorized)
  Context:     constexpr size_t array_size = 16 * 1024 * 1024;  // 16MB to exceed cache sizes

src//system_capabilities.cpp:73 - Value: 1024 (uncategorized)
  Context:     constexpr size_t array_size = 16 * 1024 * 1024;  // 16MB to exceed cache sizes

src//system_capabilities.cpp:109 - Value: 1600 (uncategorized)
  Context:         return 25.0;  // Reasonable fallback for DDR3-1600 dual channel

src//system_capabilities.cpp:135 - Value: 1024 (uncategorized)
  Context:     l1_cache_size_ = 32 * 1024;        // 32KB typical L1

src//system_capabilities.cpp:136 - Value: 256 (uncategorized)
  Context:     l2_cache_size_ = 256 * 1024;       // 256KB typical L2

src//system_capabilities.cpp:136 - Value: 1024 (uncategorized)
  Context:     l2_cache_size_ = 256 * 1024;       // 256KB typical L2

src//system_capabilities.cpp:137 - Value: 1024 (uncategorized)
  Context:     l3_cache_size_ = 8 * 1024 * 1024;  // 8MB typical L3

src//system_capabilities.cpp:137 - Value: 1024 (uncategorized)
  Context:     l3_cache_size_ = 8 * 1024 * 1024;  // 8MB typical L3

src//platform_constants_impl.cpp:342 - Value: 512 (uncategorized)
  Context:             return 8;  // AVX-512: 8 doubles per register

src//platform_constants_impl.cpp:369 - Value: 512 (uncategorized)
  Context:         return stats::arch::cpu::intel::CACHE_LINE_SIZE;  // AVX-512: Use full cache line alignment

src//platform_constants_impl.cpp:435 - Value: 256 (uncategorized)
  Context:         return 256;

src//platform_constants_impl.cpp:437 - Value: 384 (uncategorized)
  Context:         return 384;

src//platform_constants_impl.cpp:439 - Value: 512 (uncategorized)
  Context:         return 512;

src//platform_constants_impl.cpp:441 - Value: 768 (uncategorized)
  Context:         return 768;

src//platform_constants_impl.cpp:443 - Value: 1024 (uncategorized)
  Context:         return 1024;

src//platform_constants_impl.cpp:445 - Value: 2048 (uncategorized)
  Context:         return 2048;  // Higher threshold for scalar operations

src//platform_constants_impl.cpp:481 - Value: 4096 (uncategorized)
  Context:                                      : 4096;  // Use half of L1

src//platform_constants_impl.cpp:484 - Value: 32768 (uncategorized)
  Context:         features.l2_cache_size > 0 ? (features.l2_cache_size / sizeof(double)) / detail::TWO_INT : 32768;

src//platform_constants_impl.cpp:487 - Value: 262144 (uncategorized)
  Context:         features.l3_cache_size > 0 ? (features.l3_cache_size / sizeof(double)) / detail::FOUR_INT : 262144;

src//cpu_vendor_detection.cpp:44 - Value: 128 (uncategorized)
  Context:         return apple_silicon::CACHE_LINE_SIZE;  // 128 bytes

src//cpu_vendor_detection.cpp:66 - Value: 32768 (uncategorized)
  Context:     return 32768;  // Default to 32KB

src//discrete.cpp:1599 - Value: 1000000 (uncategorized)
  Context:     if (range > 1000000) {  // 1M elements max (4MB memory)

src//discrete.cpp:1604 - Value: 10000 (uncategorized)
  Context:     if (range > 10000) {  // Warning for large ranges

src//benchmark.cpp:606 - Value: 1024 (uncategorized)
  Context:     if (cpuFeatures.l3_cache_size >= 16 * 1024 * 1024) {  // 16MB+

src//benchmark.cpp:606 - Value: 1024 (uncategorized)
  Context:     if (cpuFeatures.l3_cache_size >= 16 * 1024 * 1024) {  // 16MB+

src//benchmark.cpp:609 - Value: 1024 (uncategorized)
  Context:     } else if (cpuFeatures.l3_cache_size <= 4 * 1024 * 1024) {  // 4MB or less

src//benchmark.cpp:609 - Value: 1024 (uncategorized)
  Context:     } else if (cpuFeatures.l3_cache_size <= 4 * 1024 * 1024) {  // 4MB or less

src//cpu_detection.cpp:692 - Value: 512 (uncategorized)
  Context:         return 8;  // 512 bits / 64 bits per double

src//cpu_detection.cpp:694 - Value: 256 (uncategorized)
  Context:         return 4;  // 256 bits / 64 bits per double

src//cpu_detection.cpp:696 - Value: 128 (uncategorized)
  Context:         return 2;  // 128 bits / 64 bits per double

src//cpu_detection.cpp:698 - Value: 128 (uncategorized)
  Context:         return 2;  // 128 bits / 64 bits per double

src//cpu_detection.cpp:706 - Value: 512 (uncategorized)
  Context:         return 16;  // 512 bits / 32 bits per float

src//cpu_detection.cpp:708 - Value: 256 (uncategorized)
  Context:         return 8;  // 256 bits / 32 bits per float

src//cpu_detection.cpp:710 - Value: 128 (uncategorized)
  Context:         return 4;  // 128 bits / 32 bits per float

src//cpu_detection.cpp:712 - Value: 128 (uncategorized)
  Context:         return 4;  // 128 bits / 32 bits per float

src//cpu_detection.cpp:720 - Value: 512 (uncategorized)
  Context:         return 64;  // 512 bits = 64 bytes

src//cpu_detection.cpp:722 - Value: 256 (uncategorized)
  Context:         return 32;  // 256 bits = 32 bytes

src//cpu_detection.cpp:724 - Value: 128 (uncategorized)
  Context:         return 16;  // 128 bits = 16 bytes

src//cpu_detection.cpp:953 - Value: 142 (uncategorized)
  Context:            (features.model == 142 ||

src//cpu_detection.cpp:954 - Value: 158 (uncategorized)
  Context:             features.model == 158  // Kaby Lake-U/Y: 142, Coffee Lake-S: 158

src//cpu_detection.cpp:954 - Value: 142 (uncategorized)
  Context:             features.model == 158  // Kaby Lake-U/Y: 142, Coffee Lake-S: 158

src//cpu_detection.cpp:954 - Value: 158 (uncategorized)
  Context:             features.model == 158  // Kaby Lake-U/Y: 142, Coffee Lake-S: 158

src//cpu_detection.cpp:955 - Value: 165 (uncategorized)
  Context:             || features.model == 165 ||

src//cpu_detection.cpp:956 - Value: 166 (uncategorized)
  Context:             features.model == 166);  // Coffee Lake-H: 165, Cannon Lake: 166

src//cpu_detection.cpp:956 - Value: 165 (uncategorized)
  Context:             features.model == 166);  // Coffee Lake-H: 165, Cannon Lake: 166

src//cpu_detection.cpp:956 - Value: 166 (uncategorized)
  Context:             features.model == 166);  // Coffee Lake-H: 165, Cannon Lake: 166

src//cpu_detection.cpp:963 - Value: 512 (uncategorized)
  Context:            (features.avx512f                                      // Any CPU with AVX-512 is modern

src//cpu_detection.cpp:964 - Value: 125 (uncategorized)
  Context:             || (features.family == 6 && features.model >= 125));  // Ice Lake and newer models

src//parallel_thresholds.cpp:20 - Value: 128 (uncategorized)
  Context:     profile.simd_width_elements = 2;  // NEON 128-bit

src//parallel_thresholds.cpp:22 - Value: 1024 (uncategorized)
  Context:     profile.base_parallel_threshold = 1024;

src//parallel_thresholds.cpp:26 - Value: 256 (uncategorized)
  Context:     profile.simd_width_elements = 4;  // AVX2 256-bit / 4 doubles

src//parallel_thresholds.cpp:28 - Value: 2048 (uncategorized)
  Context:     profile.base_parallel_threshold = 2048;

src//parallel_thresholds.cpp:32 - Value: 128 (uncategorized)
  Context:     profile.simd_width_elements = 2;  // SSE 128-bit / 2 doubles

src//parallel_thresholds.cpp:34 - Value: 4096 (uncategorized)
  Context:     profile.base_parallel_threshold = 4096;

src//parallel_thresholds.cpp:40 - Value: 8192 (uncategorized)
  Context:     profile.base_parallel_threshold = 8192;

src//parallel_thresholds.cpp:47 - Value: 1024 (uncategorized)
  Context:         profile.l3_cache_size_elements = 2 * 1024 * 1024;  // 2MB worth of doubles

src//parallel_thresholds.cpp:47 - Value: 1024 (uncategorized)
  Context:         profile.l3_cache_size_elements = 2 * 1024 * 1024;  // 2MB worth of doubles

src//parallel_thresholds.cpp:113 - Value: 16384 (uncategorized)
  Context:             threshold = 16384;

src//parallel_thresholds.cpp:117 - Value: 16384 (uncategorized)
  Context:             threshold = 16384;

src//parallel_thresholds.cpp:121 - Value: 8192 (uncategorized)
  Context:             threshold = 8192;

src//parallel_thresholds.cpp:125 - Value: 1048576 (uncategorized)
  Context:             threshold = 1048576;

src//parallel_thresholds.cpp:127 - Value: 32768 (uncategorized)
  Context:             threshold = 32768;

src//parallel_thresholds.cpp:129 - Value: 65536 (uncategorized)
  Context:             threshold = 65536;

src//parallel_thresholds.cpp:133 - Value: 32768 (uncategorized)
  Context:             threshold = 32768;

src//parallel_thresholds.cpp:139 - Value: 128 (uncategorized)
  Context:             threshold = 128;

src//parallel_thresholds.cpp:151 - Value: 256 (uncategorized)
  Context:             threshold = 256;

src//parallel_thresholds.cpp:157 - Value: 256 (uncategorized)
  Context:             threshold = 256;

src//parallel_thresholds.cpp:161 - Value: 4096 (uncategorized)
  Context:             threshold = 4096;

src//parallel_thresholds.cpp:163 - Value: 8192 (uncategorized)
  Context:             threshold = 8192;

src//parallel_thresholds.cpp:165 - Value: 512 (uncategorized)
  Context:             threshold = 512;

src//parallel_thresholds.cpp:169 - Value: 4096 (uncategorized)
  Context:             threshold = 4096;

src//parallel_thresholds.cpp:173 - Value: 256 (uncategorized)
  Context:             threshold = 256;

src//parallel_thresholds.cpp:175 - Value: 512 (uncategorized)
  Context:             threshold = 512;

src//parallel_thresholds.cpp:177 - Value: 128 (uncategorized)
  Context:             threshold = 128;

src//parallel_thresholds.cpp:181 - Value: 256 (uncategorized)
  Context:             threshold = 256;

src//parallel_thresholds.cpp:186 - Value: 8192 (uncategorized)
  Context:             threshold = 8192;

src//parallel_thresholds.cpp:188 - Value: 4096 (uncategorized)
  Context:             threshold = 4096;

src//parallel_thresholds.cpp:190 - Value: 16384 (uncategorized)
  Context:             threshold = 16384;

src//parallel_thresholds.cpp:192 - Value: 8192 (uncategorized)
  Context:             threshold = 8192;

src//parallel_thresholds.cpp:194 - Value: 8192 (uncategorized)
  Context:             threshold = 8192;  // Default for generic operations

src//poisson.cpp:2969 - Value: 170 (uncategorized)
  Context:     if (n > 170)

src//simd_avx512.cpp:19 - Value: 512 (uncategorized)
  Context: #include <immintrin.h>  // AVX-512 intrinsics

src//performance_dispatcher.cpp:251 - Value: 500 (iteration_limit)
  Context:             thresholds.parallel_min = 500;  // Powerful SIMD reduces parallel threshold

src//performance_dispatcher.cpp:252 - Value: 8000 (uncategorized)
  Context:             thresholds.work_stealing_min = 8000;

src//performance_dispatcher.cpp:253 - Value: 32000 (uncategorized)
  Context:             thresholds.gpu_accelerated_min = 32000;

src//performance_dispatcher.cpp:257 - Value: 10000 (uncategorized)
  Context:             thresholds.work_stealing_min = 10000;

src//performance_dispatcher.cpp:258 - Value: 50000 (uncategorized)
  Context:             thresholds.gpu_accelerated_min = 50000;

src//performance_dispatcher.cpp:262 - Value: 50000 (uncategorized)
  Context:             thresholds.work_stealing_min = 50000;

src//performance_dispatcher.cpp:263 - Value: 200000 (uncategorized)
  Context:             thresholds.gpu_accelerated_min = 200000;

src//performance_dispatcher.cpp:266 - Value: 2000 (uncategorized)
  Context:             thresholds.parallel_min = 2000;  // Older architecture, conservative

src//performance_dispatcher.cpp:267 - Value: 20000 (uncategorized)
  Context:             thresholds.work_stealing_min = 20000;

src//performance_dispatcher.cpp:268 - Value: 100000 (uncategorized)
  Context:             thresholds.gpu_accelerated_min = 100000;

src//performance_dispatcher.cpp:271 - Value: 1500 (uncategorized)
  Context:             thresholds.parallel_min = 1500;  // ARM characteristics

src//performance_dispatcher.cpp:272 - Value: 15000 (uncategorized)
  Context:             thresholds.work_stealing_min = 15000;

src//performance_dispatcher.cpp:273 - Value: 75000 (uncategorized)
  Context:             thresholds.gpu_accelerated_min = 75000;

src//performance_dispatcher.cpp:278 - Value: 500 (iteration_limit)
  Context:             thresholds.parallel_min = 500;   // Lower threshold since SIMD unavailable

src//performance_dispatcher.cpp:280 - Value: 25000 (uncategorized)
  Context:             thresholds.gpu_accelerated_min = 25000;

src//performance_dispatcher.cpp:493 - Value: 10000 (uncategorized)
  Context:     gpu_accelerated_min = std::max(gpu_accelerated_min, static_cast<size_t>(10000));

=== Negative Numbers ===

src//validation.cpp:127 - Value: -1259.1392167224028 (uncategorized)
  Context:         0.99999999999980993,  676.5203681218851,     -1259.1392167224028,

src//validation.cpp:128 - Value: -176.61502916214059 (uncategorized)
  Context:         771.32342877765313,   -176.61502916214059,   12.507343278686905,

src//gamma.cpp:1039 - Value: -1.28 (uncategorized)
  Context:         p_value = std::exp(-1.28 * modified_stat);

src//gamma.cpp:1041 - Value: -1.8 (uncategorized)
  Context:         p_value = std::exp(-1.8 * modified_stat + 1.5);

src//gamma.cpp:2886 - Value: -1 (uncategorized)
  Context:     result -= z_inv_sq * z_inv_sq * z_inv / 30.0;             // -1/(30z⁵)

src//uniform.cpp:86 - Value: -1 (uncategorized)
  Context:             if (std::try_lock(lock1, lock2) == -1) {

src//uniform.cpp:980 - Value: -1.2804 (uncategorized)
  Context:         p_value = detail::ONE - std::exp(-1.2804 * std::pow(ad_stat, -detail::HALF));

src//uniform.cpp:986 - Value: -1.8 (uncategorized)
  Context:         p_value = std::exp(-1.8 * ad_stat + 0.258);

src//uniform.cpp:1080 - Value: -1000.0 (uncategorized)
  Context:                 std::isfinite(log_prob) ? log_prob : -1000.0;  // Penalty for out-of-bounds

src//uniform.cpp:1147 - Value: -1000.0 (uncategorized)
  Context:             std::isfinite(log_prob) ? log_prob : -1000.0;  // Penalty for out-of-bounds

src//uniform.cpp:1186 - Value: -1000.0 (uncategorized)
  Context:             log_likelihood += -1000.0;

src//system_capabilities.cpp:109 - Value: -1600 (uncategorized)
  Context:         return 25.0;  // Reasonable fallback for DDR3-1600 dual channel

src//discrete.cpp:138 - Value: -1 (uncategorized)
  Context:             if (std::try_lock(lock1, lock2) == -1) {

src//discrete.cpp:1159 - Value: -1.2337 (uncategorized)
  Context:         p_value = detail::ONE - std::exp(-1.2337 * std::pow(ad_statistic, -detail::ONE) + detail::ONE);

src//gaussian.cpp:92 - Value: -1 (uncategorized)
  Context:             if (std::try_lock(lock1, lock2) == -1) {

src//poisson.cpp:83 - Value: -1 (uncategorized)
  Context:             if (std::try_lock(lock1, lock2) == -1) {

src//poisson.cpp:1035 - Value: -1 (uncategorized)
  Context:             p_value += detail::TWO * std::pow(-1, k) * std::exp(-detail::TWO * k * k * lambda_ks * lambda_ks);

src//poisson.cpp:1076 - Value: -1.2337 (uncategorized)
  Context:         p_value = detail::ONE - std::exp(-1.2337 * std::pow(ad_statistic, -detail::ONE) + detail::ONE);

src//poisson.cpp:1171 - Value: -1 (uncategorized)
  Context:     const int df = static_cast<int>(num_groups) - 1 - 1;  // -1 for estimated lambda

src//exponential.cpp:87 - Value: -1 (uncategorized)
  Context:             if (std::try_lock(lock1, lock2) == -1) {

src//math_utils.cpp:59 - Value: -18.61500062529 (uncategorized)
  Context:     static const double a1 = -18.61500062529;

src//math_utils.cpp:61 - Value: -25.44106049637 (uncategorized)
  Context:     static const double a3 = -25.44106049637;

src//math_utils.cpp:63 - Value: -8.47351093090 (uncategorized)
  Context:     static const double b0 = -8.47351093090;

src//math_utils.cpp:65 - Value: -21.06224101826 (uncategorized)
  Context:     static const double b2 = -21.06224101826;
