File,Line,Value,Context,Category
src//validation.cpp,125,7.0,"    static const double g = 7.0;",uncategorized
src//validation.cpp,127,0.99999999999980993,"        0.99999999999980993   676.5203681218851      -1259.1392167224028 ",uncategorized
src//validation.cpp,127,676.5203681218851,"        0.99999999999980993   676.5203681218851      -1259.1392167224028 ",uncategorized
src//validation.cpp,127,1259.1392167224028,"        0.99999999999980993   676.5203681218851      -1259.1392167224028 ",uncategorized
src//validation.cpp,128,771.32342877765313,"        771.32342877765313    -176.61502916214059    12.507343278686905 ",uncategorized
src//validation.cpp,128,176.61502916214059,"        771.32342877765313    -176.61502916214059    12.507343278686905 ",uncategorized
src//validation.cpp,128,12.507343278686905,"        771.32342877765313    -176.61502916214059    12.507343278686905 ",uncategorized
src//validation.cpp,129,0.13857109526572012,"        -0.13857109526572012  9.9843695780195716e-6  1.5056327351493116e-7};",uncategorized
src//validation.cpp,295,0.27,"        if (z < 0.27) {",uncategorized
src//validation.cpp,326,0.576,"        0.576   // α = 0.50",uncategorized
src//validation.cpp,326,0.50,"        0.576   // α = 0.50",uncategorized
src//validation.cpp,327,0.656,"        0.656   // α = 0.40",uncategorized
src//validation.cpp,327,0.40,"        0.656   // α = 0.40",uncategorized
src//validation.cpp,328,0.787,"        0.787   // α = 0.30",uncategorized
src//validation.cpp,328,0.30,"        0.787   // α = 0.30",uncategorized
src//validation.cpp,329,1.248,"        1.248   // α = detail::QUARTER",uncategorized
src//validation.cpp,330,1.610,"        1.610   // α = 0.15",uncategorized
src//validation.cpp,330,0.15,"        1.610   // α = 0.15",uncategorized
src//validation.cpp,331,1.933,"        1.933   // α = detail::ALPHA_10",uncategorized
src//validation.cpp,332,2.492,"        2.492   // α = detail::ALPHA_05",uncategorized
src//validation.cpp,333,3.070,"        3.070   // α = 0.025",uncategorized
src//validation.cpp,333,0.025,"        3.070   // α = 0.025",uncategorized
src//validation.cpp,334,3.857,"        3.857   // α = detail::ALPHA_01",uncategorized
src//validation.cpp,335,4.500,"        4.500   // α = 0.005",uncategorized
src//validation.cpp,335,0.005,"        4.500   // α = 0.005",uncategorized
src//validation.cpp,338,0.50,"    static const double extended_significance_levels[] = {0.50  0.40  0.30   detail::QUARTER  0.15 ",uncategorized
src//validation.cpp,338,0.40,"    static const double extended_significance_levels[] = {0.50  0.40  0.30   detail::QUARTER  0.15 ",uncategorized
src//validation.cpp,338,0.30,"    static const double extended_significance_levels[] = {0.50  0.40  0.30   detail::QUARTER  0.15 ",uncategorized
src//validation.cpp,338,0.15,"    static const double extended_significance_levels[] = {0.50  0.40  0.30   detail::QUARTER  0.15 ",uncategorized
src//validation.cpp,339,0.025,"                                                          detail::ALPHA_10  detail::ALPHA_05  0.025  detail::ALPHA_01  0.005};",uncategorized
src//validation.cpp,339,0.005,"                                                          detail::ALPHA_10  detail::ALPHA_05  0.025  detail::ALPHA_01  0.005};",uncategorized
src//validation.cpp,460,2.25,"                        2.25 / (static_cast<double>(n) * static_cast<double>(n)));",uncategorized
src//performance_history.cpp,333,1.05,"                if (improvement_ratio > 1.05) {",uncategorized
src//performance_history.cpp,351,1.1,"    constexpr double MIN_IMPROVEMENT_RATIO = 1.1;  // Require 10% improvement",uncategorized
src//gamma.cpp,542,2.706,"        chi2_critical = 2.706;",uncategorized
src//gamma.cpp,583,2.706,"        chi2_critical = 2.706;",uncategorized
src//gamma.cpp,653,4.605,"        chi2_critical = 4.605;",uncategorized
src//gamma.cpp,991,1.36,"    double critical_value = 1.36 / std::sqrt(n);  // Approximation for KS test critical value",uncategorized
src//gamma.cpp,999,0.27,"    if (lambda < 0.27) {",uncategorized
src//gamma.cpp,1007,8.0,"        double correction = detail::ONE - detail::TWO * lambda * lambda / detail::THREE + 8.0 * std::pow(lambda  4) / 15.0;",uncategorized
src//gamma.cpp,1007,15.0,"        double correction = detail::ONE - detail::TWO * lambda * lambda / detail::THREE + 8.0 * std::pow(lambda  4) / 15.0;",uncategorized
src//gamma.cpp,1032,2.25,"    const double modified_stat = ad_statistic * (detail::ONE + detail::AD_P_VALUE_MEDIUM / n + 2.25 / (n * n));",uncategorized
src//gamma.cpp,1036,13.0,"    if (modified_stat >= 13.0) {",uncategorized
src//gamma.cpp,1039,1.28,"        p_value = std::exp(-1.28 * modified_stat);",uncategorized
src//gamma.cpp,1041,1.8,"        p_value = std::exp(-1.8 * modified_stat + 1.5);",uncategorized
src//gamma.cpp,1041,1.5,"        p_value = std::exp(-1.8 * modified_stat + 1.5);",uncategorized
src//gamma.cpp,2690,0.1,"        x = std::max(x - delta  x * 0.1);  // Ensure x stays positive",uncategorized
src//gamma.cpp,2722,0.0331,"        if (u < detail::ONE - 0.0331 * (x * x) * (x * x)) {",uncategorized
src//gamma.cpp,2794,24.0,"    double alpha_est = (detail::THREE - s + std::sqrt((s - detail::THREE) * (s - detail::THREE) + 24.0 * s)) / (12.0 * s);",uncategorized
src//gamma.cpp,2794,12.0,"    double alpha_est = (detail::THREE - s + std::sqrt((s - detail::THREE) * (s - detail::THREE) + 24.0 * s)) / (12.0 * s);",uncategorized
src//gamma.cpp,2844,8.0,"    while (z < 8.0) {",uncategorized
src//gamma.cpp,2855,12.0,"    result -= z_inv_sq / 12.0;                         // Bernoulli B₂/2",uncategorized
src//gamma.cpp,2856,120.0,"    result += z_inv_sq * z_inv_sq / 120.0;             // Bernoulli B₄/4",uncategorized
src//gamma.cpp,2857,252.0,"    result -= z_inv_sq * z_inv_sq * z_inv_sq / 252.0;  // Bernoulli B₆/6",uncategorized
src//gamma.cpp,2874,8.0,"    while (z < 8.0) {",uncategorized
src//gamma.cpp,2886,30.0,"    result -= z_inv_sq * z_inv_sq * z_inv / 30.0;             // -1/(30z⁵)",uncategorized
src//gamma.cpp,2887,42.0,"    result += z_inv_sq * z_inv_sq * z_inv_sq * z_inv / 42.0;  // 1/(42z⁷)",uncategorized
src//uniform.cpp,786,12.0,"    const double range_estimate = std::sqrt(12.0 * variance);",uncategorized
src//uniform.cpp,906,12.0,"    const double expected_variance = sample_range * sample_range / 12.0;",uncategorized
src//uniform.cpp,967,3.857,"        critical_value = 3.857;",uncategorized
src//uniform.cpp,969,2.492,"        critical_value = 2.492;",uncategorized
src//uniform.cpp,971,1.933,"        critical_value = 1.933;",uncategorized
src//uniform.cpp,973,1.159,"        critical_value = 1.159;  // alpha = detail::QUARTER",uncategorized
src//uniform.cpp,980,1.2804,"        p_value = detail::ONE - std::exp(-1.2804 * std::pow(ad_stat  -detail::HALF));",uncategorized
src//uniform.cpp,981,0.34,"    } else if (ad_stat < 0.34) {",uncategorized
src//uniform.cpp,982,0.26,"        p_value = detail::ONE - std::exp(-detail::LARGE_EFFECT * ad_stat - 0.26);",uncategorized
src//uniform.cpp,983,0.6,"    } else if (ad_stat < 0.6) {",uncategorized
src//uniform.cpp,984,0.9,"        p_value = std::exp(-0.9 * ad_stat - 0.16);",uncategorized
src//uniform.cpp,984,0.16,"        p_value = std::exp(-0.9 * ad_stat - 0.16);",uncategorized
src//uniform.cpp,986,1.8,"        p_value = std::exp(-1.8 * ad_stat + 0.258);",uncategorized
src//uniform.cpp,986,0.258,"        p_value = std::exp(-1.8 * ad_stat + 0.258);",uncategorized
src//uniform.cpp,1080,1000.0,"                std::isfinite(log_prob) ? log_prob : -1000.0;  // Penalty for out-of-bounds",uncategorized
src//uniform.cpp,1147,1000.0,"            std::isfinite(log_prob) ? log_prob : -1000.0;  // Penalty for out-of-bounds",uncategorized
src//uniform.cpp,1186,1000.0,"            log_likelihood += -1000.0;",uncategorized
src//system_capabilities.cpp,23,1.5,"    std::vector<double> data(BENCHMARK_ARRAY_SIZE  1.5);",uncategorized
src//system_capabilities.cpp,41,10.0,"    return std::min(detail::ONE  10.0 / std::max(detail::ONE  time_per_operation));",uncategorized
src//system_capabilities.cpp,109,25.0,"        return 25.0;  // Reasonable fallback for DDR3-1600 dual channel",uncategorized
src//platform_constants_impl.cpp,462,1.5,"        return static_cast<std::size_t>(std::round(static_cast<double>(base_grain) * 1.5));",uncategorized
src//discrete.cpp,936,12.0,"    const double range_estimate = std::sqrt(12.0 * sample_variance);",uncategorized
src//discrete.cpp,968,4.0,"        (posterior_a_interval.second - posterior_a_interval.first) / 4.0;  // rough estimate",uncategorized
src//discrete.cpp,974,4.0,"        (posterior_b_interval.second - posterior_b_interval.first) / 4.0;  // rough estimate",uncategorized
src//discrete.cpp,1111,0.27,"    if (lambda < 0.27) {",uncategorized
src//discrete.cpp,1119,8.0,"        double correction = detail::ONE - detail::TWO * lambda * lambda / detail::THREE + 8.0 * std::pow(lambda  4) / 15.0;",uncategorized
src//discrete.cpp,1119,15.0,"        double correction = detail::ONE - detail::TWO * lambda * lambda / detail::THREE + 8.0 * std::pow(lambda  4) / 15.0;",uncategorized
src//discrete.cpp,1147,3.857,"        critical_value = 3.857;",uncategorized
src//discrete.cpp,1149,2.492,"        critical_value = 2.492;",uncategorized
src//discrete.cpp,1151,1.933,"        critical_value = 1.933;",uncategorized
src//discrete.cpp,1153,1.159,"        critical_value = 1.159;  // alpha = detail::QUARTER",uncategorized
src//discrete.cpp,1159,1.2337,"        p_value = detail::ONE - std::exp(-1.2337 * std::pow(ad_statistic  -detail::ONE) + detail::ONE);",uncategorized
src//discrete.cpp,1234,0.025,"        p_value = (z_score > detail::Z_95) ? 0.025 : detail::AD_THRESHOLD_1;  // Very rough normal approximation",uncategorized
src//benchmark.cpp,176,1.05,"            if (speedup > 1.05) {",uncategorized
src//benchmark.cpp,597,1.5,"        iterations = static_cast<std::size_t>(static_cast<double>(iterations) * 1.5);",uncategorized
src//benchmark.cpp,598,1.2,"        warmupRuns = static_cast<std::size_t>(static_cast<double>(warmupRuns) * 1.2);",uncategorized
src//benchmark.cpp,608,1.2,"        iterations = static_cast<std::size_t>(static_cast<double>(iterations) * 1.2);",uncategorized
src//benchmark.cpp,611,0.9,"        iterations = static_cast<std::size_t>(static_cast<double>(iterations) * 0.9);",uncategorized
src//benchmark.cpp,617,1.3,"        warmupRuns = static_cast<std::size_t>(static_cast<double>(warmupRuns) * 1.3);",uncategorized
src//gaussian.cpp,1267,1.5,"    const double skewness = m3 / std::pow(m2  1.5);",uncategorized
src//gaussian.cpp,3014,0.0625,"    isLowVariance_ = cachedSigmaSquared_ < 0.0625;  // σ² < 1/16",uncategorized
src//parallel_thresholds.cpp,27,0.85,"    profile.thread_efficiency_factor = 0.85;",uncategorized
src//poisson.cpp,1027,0.27,"    if (lambda_ks < 0.27) {",uncategorized
src//poisson.cpp,1076,1.2337,"        p_value = detail::ONE - std::exp(-1.2337 * std::pow(ad_statistic  -detail::ONE) + detail::ONE);",uncategorized
src//distribution_base.cpp,368,15.0,"    if (std::abs(combined - whole) < 15.0 * tolerance) {",uncategorized
src//distribution_base.cpp,369,15.0,"        return combined + (combined - whole) / 15.0;  // Richardson extrapolation",uncategorized
src//exponential.cpp,947,0.6,"    const double ad_adjusted = ad_statistic * (detail::ONE + 0.6 / n_double);",uncategorized
src//exponential.cpp,955,13.436,"                  std::exp(-13.436 + 101.14 * ad_adjusted - 223.73 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,955,101.14,"                  std::exp(-13.436 + 101.14 * ad_adjusted - 223.73 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,955,223.73,"                  std::exp(-13.436 + 101.14 * ad_adjusted - 223.73 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,956,0.34,"    } else if (ad_adjusted < 0.34) {",uncategorized
src//exponential.cpp,958,8.318,"                  std::exp(-8.318 + 42.796 * ad_adjusted - 59.938 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,958,42.796,"                  std::exp(-8.318 + 42.796 * ad_adjusted - 59.938 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,958,59.938,"                  std::exp(-8.318 + 42.796 * ad_adjusted - 59.938 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,959,0.6,"    } else if (ad_adjusted < 0.6) {",uncategorized
src//exponential.cpp,960,0.9177,"        p_value = std::exp(0.9177 - 4.279 * ad_adjusted - 1.38 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,960,4.279,"        p_value = std::exp(0.9177 - 4.279 * ad_adjusted - 1.38 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,960,1.38,"        p_value = std::exp(0.9177 - 4.279 * ad_adjusted - 1.38 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,962,1.2937,"        p_value = std::exp(1.2937 - 5.709 * ad_adjusted + 0.0186 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,962,5.709,"        p_value = std::exp(1.2937 - 5.709 * ad_adjusted + 0.0186 * ad_adjusted * ad_adjusted);",uncategorized
src//exponential.cpp,962,0.0186,"        p_value = std::exp(1.2937 - 5.709 * ad_adjusted + 0.0186 * ad_adjusted * ad_adjusted);",uncategorized
src//math_utils.cpp,58,2.50662823884,"    static const double a0 = 2.50662823884;",uncategorized
src//math_utils.cpp,59,18.61500062529,"    static const double a1 = -18.61500062529;",uncategorized
src//math_utils.cpp,60,41.39119773534,"    static const double a2 = 41.39119773534;",uncategorized
src//math_utils.cpp,61,25.44106049637,"    static const double a3 = -25.44106049637;",uncategorized
src//math_utils.cpp,63,8.47351093090,"    static const double b0 = -8.47351093090;",uncategorized
src//math_utils.cpp,64,23.08336743743,"    static const double b1 = 23.08336743743;",uncategorized
src//math_utils.cpp,65,21.06224101826,"    static const double b2 = -21.06224101826;",uncategorized
src//math_utils.cpp,66,3.13082909833,"    static const double b3 = 3.13082909833;",uncategorized
src//math_utils.cpp,82,2.515517,"        static const double d0 = 2.515517;",uncategorized
src//math_utils.cpp,83,0.802853,"        static const double d1 = 0.802853;",uncategorized
src//math_utils.cpp,84,0.010328,"        static const double d2 = 0.010328;",uncategorized
src//math_utils.cpp,85,1.432788,"        static const double e1 = 1.432788;",uncategorized
src//math_utils.cpp,86,0.189269,"        static const double e2 = 0.189269;",uncategorized
src//math_utils.cpp,87,0.001308,"        static const double e3 = 0.001308;",uncategorized
src//math_utils.cpp,113,8.0,"                                      (8.0 * sqrt_log_eps * sqrt_log_eps * sqrt_log_eps);",uncategorized
src//math_utils.cpp,121,2.515517,"            static const double d0 = 2.515517;",uncategorized
src//math_utils.cpp,122,0.802853,"            static const double d1 = 0.802853;",uncategorized
src//math_utils.cpp,123,0.010328,"            static const double d2 = 0.010328;",uncategorized
src//math_utils.cpp,124,1.432788,"            static const double e0 = 1.432788;",uncategorized
src//math_utils.cpp,125,0.189269,"            static const double e1 = 0.189269;",uncategorized
src//math_utils.cpp,126,0.001308,"            static const double e2 = 0.001308;",uncategorized
src//math_utils.cpp,710,1000.0,"    if (df >= 1000.0) {",uncategorized
src//math_utils.cpp,812,0.1,"    if (p < 0.1 || p > 0.9) {",uncategorized
src//math_utils.cpp,812,0.9,"    if (p < 0.1 || p > 0.9) {",uncategorized
src//math_utils.cpp,815,10.0,"        double high = df + 10.0 * std::sqrt(df);  // Conservative upper bound",uncategorized
src//math_utils.cpp,875,10.0,"        if (x > df + 10.0 * std::sqrt(df) || !std::isfinite(x)) {",uncategorized
src//math_utils.cpp,878,10.0,"            double high = df + 10.0 * std::sqrt(df);",uncategorized
src//math_utils.cpp,1016,0.1,"    if (p < 0.1 || p > 0.9) {",uncategorized
src//math_utils.cpp,1016,0.9,"    if (p < 0.1 || p > 0.9) {",uncategorized
src//math_utils.cpp,1018,10.0,"        double high = mean + 10.0 * std::sqrt(variance);  // Conservative upper bound",uncategorized
src//math_utils.cpp,1070,10.0,"        if (x > mean + 10.0 * std::sqrt(variance) || !std::isfinite(x)) {",uncategorized
src//math_utils.cpp,1073,10.0,"            double high = mean + 10.0 * std::sqrt(variance);",uncategorized
src//performance_dispatcher.cpp,125,50.0,"    return batch_size >= thresholds_.gpu_accelerated_min && system.memory_bandwidth_gb_s() >= 50.0;",uncategorized
src//performance_dispatcher.cpp,176,1000000.0,"            threading_overhead < (1000000.0 * dist_chars.base_complexity)) {",uncategorized
src//performance_dispatcher.cpp,178,0.6,"            return (dist_chars.parallelization_efficiency > 0.6) ? Strategy::PARALLEL_SIMD",uncategorized
src//performance_dispatcher.cpp,187,0.6,"        if (effective_simd_efficiency > detail::HALF && dist_chars.vectorization_efficiency > 0.6) {",uncategorized
src//performance_dispatcher.cpp,197,200000.0,"    double acceptable_overhead = 200000.0 * dist_chars.base_complexity;  // Scale by complexity",uncategorized
src//performance_dispatcher.cpp,200,0.4,"        if (effective_simd_efficiency > 0.4) {",uncategorized
src//performance_dispatcher.cpp,209,50.0,"                              (memory_bandwidth >= 50.0) &&",uncategorized
src//performance_dispatcher.cpp,221,1.2,"        (dist_chars.branch_prediction_cost > 1.2);  // High branching variability",uncategorized
src//performance_dispatcher.cpp,228,0.6,"    if (dist_chars.parallelization_efficiency > 0.6) {",uncategorized
src//performance_dispatcher.cpp,233,0.4,"    if (effective_simd_efficiency > 0.4) {",uncategorized
src//performance_dispatcher.cpp,400,1.5,"        simd_min = static_cast<size_t>(static_cast<double>(simd_min) * (1.5 / simd_efficiency));",uncategorized
src//performance_dispatcher.cpp,403,1.5,"        uniform_parallel_min = static_cast<size_t>(static_cast<double>(uniform_parallel_min) * 1.5);",uncategorized
src//performance_dispatcher.cpp,405,1.5,"            static_cast<size_t>(static_cast<double>(gaussian_parallel_min) * 1.5);",uncategorized
src//performance_dispatcher.cpp,407,1.5,"            static_cast<size_t>(static_cast<double>(exponential_parallel_min) * 1.5);",uncategorized
src//performance_dispatcher.cpp,409,1.5,"            static_cast<size_t>(static_cast<double>(discrete_parallel_min) * 1.5);",uncategorized
src//performance_dispatcher.cpp,410,1.5,"        poisson_parallel_min = static_cast<size_t>(static_cast<double>(poisson_parallel_min) * 1.5);",uncategorized
src//performance_dispatcher.cpp,411,1.5,"        gamma_parallel_min = static_cast<size_t>(static_cast<double>(gamma_parallel_min) * 1.5);",uncategorized
src//performance_dispatcher.cpp,412,1.5,"    } else if (simd_efficiency > 1.5) {",uncategorized
src//performance_dispatcher.cpp,429,100000.0,"    if (threading_overhead > 100000.0) {  // > 100μs overhead",uncategorized
src//performance_dispatcher.cpp,431,50000.0,"        double multiplier = std::min(detail::THREE  threading_overhead / 50000.0);",uncategorized
src//performance_dispatcher.cpp,449,10000.0,"    } else if (threading_overhead < 10000.0) {  // < 10μs overhead",uncategorized
src//performance_dispatcher.cpp,451,20000.0,"        double multiplier = std::max(detail::HALF  threading_overhead / 20000.0);",uncategorized
src//performance_dispatcher.cpp,472,20.0,"    if (memory_bandwidth < 20.0) {",uncategorized
src//performance_dispatcher.cpp,474,1.5,"        gpu_accelerated_min = static_cast<size_t>(static_cast<double>(gpu_accelerated_min) * 1.5);",uncategorized
src//validation.cpp,129,9.9843695780195716e-6,"        -0.13857109526572012  9.9843695780195716e-6  1.5056327351493116e-7};",uncategorized
src//validation.cpp,129,1.5056327351493116e-7,"        -0.13857109526572012  9.9843695780195716e-6  1.5056327351493116e-7};",convergence_tolerance
src//validation.cpp,189,1e30,"        double c = 1e30;",uncategorized
src//validation.cpp,542,1e10,"            log_likelihood += -1e10;  // Large negative penalty for zero density",uncategorized
src//system_capabilities.cpp,105,1e9,"    double seconds = static_cast<double>(duration.count()) / 1e9;",uncategorized
src//system_capabilities.cpp,112,1e9,"    double bandwidth = (bytes_transferred / seconds) / 1e9;  // GB/s",uncategorized
src//math_utils.cpp,110,1e-15,"            if (eps > 1e-15) {",convergence_tolerance
src//performance_history.cpp,206,128,"    else if (batch_size <= 128)",uncategorized
src//performance_history.cpp,207,128,"        return 128;",uncategorized
src//performance_history.cpp,208,160,"    else if (batch_size <= 160)",uncategorized
src//performance_history.cpp,209,160,"        return 160;",uncategorized
src//performance_history.cpp,210,200,"    else if (batch_size <= 200)",iteration_limit
src//performance_history.cpp,211,200,"        return 200;",iteration_limit
src//performance_history.cpp,212,250,"    else if (batch_size <= 250)",uncategorized
src//performance_history.cpp,213,250,"        return 250;",uncategorized
src//performance_history.cpp,214,320,"    else if (batch_size <= 320)",uncategorized
src//performance_history.cpp,215,320,"        return 320;",uncategorized
src//performance_history.cpp,216,400,"    else if (batch_size <= 400)",uncategorized
src//performance_history.cpp,217,400,"        return 400;",uncategorized
src//performance_history.cpp,218,500,"    else if (batch_size <= 500)",iteration_limit
src//performance_history.cpp,219,500,"        return 500;",iteration_limit
src//performance_history.cpp,220,640,"    else if (batch_size <= 640)",uncategorized
src//performance_history.cpp,221,640,"        return 640;",uncategorized
src//performance_history.cpp,222,800,"    else if (batch_size <= 800)",uncategorized
src//performance_history.cpp,223,800,"        return 800;",uncategorized
src//performance_history.cpp,226,1280,"    else if (batch_size <= 1280)",uncategorized
src//performance_history.cpp,227,1280,"        return 1280;",uncategorized
src//performance_history.cpp,228,1600,"    else if (batch_size <= 1600)",uncategorized
src//performance_history.cpp,229,1600,"        return 1600;",uncategorized
src//performance_history.cpp,230,2000,"    else if (batch_size <= 2000)",uncategorized
src//performance_history.cpp,231,2000,"        return 2000;",uncategorized
src//performance_history.cpp,232,2500,"    else if (batch_size <= 2500)",uncategorized
src//performance_history.cpp,233,2500,"        return 2500;",uncategorized
src//performance_history.cpp,234,3200,"    else if (batch_size <= 3200)",uncategorized
src//performance_history.cpp,235,3200,"        return 3200;",uncategorized
src//performance_history.cpp,236,4000,"    else if (batch_size <= 4000)",uncategorized
src//performance_history.cpp,237,4000,"        return 4000;",uncategorized
src//performance_history.cpp,240,6400,"    else if (batch_size <= 6400)",uncategorized
src//performance_history.cpp,241,6400,"        return 6400;",uncategorized
src//performance_history.cpp,242,8000,"    else if (batch_size <= 8000)",uncategorized
src//performance_history.cpp,243,8000,"        return 8000;",uncategorized
src//performance_history.cpp,244,10000,"    else if (batch_size <= 10000)",uncategorized
src//performance_history.cpp,245,10000,"        return 10000;",uncategorized
src//performance_history.cpp,246,12800,"    else if (batch_size <= 12800)",uncategorized
src//performance_history.cpp,247,12800,"        return 12800;",uncategorized
src//performance_history.cpp,248,16000,"    else if (batch_size <= 16000)",uncategorized
src//performance_history.cpp,249,16000,"        return 16000;",uncategorized
src//performance_history.cpp,250,20000,"    else if (batch_size <= 20000)",uncategorized
src//performance_history.cpp,251,20000,"        return 20000;",uncategorized
src//performance_history.cpp,252,25000,"    else if (batch_size <= 25000)",uncategorized
src//performance_history.cpp,253,25000,"        return 25000;",uncategorized
src//performance_history.cpp,254,32000,"    else if (batch_size <= 32000)",uncategorized
src//performance_history.cpp,255,32000,"        return 32000;",uncategorized
src//performance_history.cpp,256,40000,"    else if (batch_size <= 40000)",uncategorized
src//performance_history.cpp,257,40000,"        return 40000;",uncategorized
src//performance_history.cpp,258,50000,"    else if (batch_size <= 50000)",uncategorized
src//performance_history.cpp,259,50000,"        return 50000;",uncategorized
src//performance_history.cpp,260,64000,"    else if (batch_size <= 64000)",uncategorized
src//performance_history.cpp,261,64000,"        return 64000;",uncategorized
src//performance_history.cpp,262,80000,"    else if (batch_size <= 80000)",uncategorized
src//performance_history.cpp,263,80000,"        return 80000;",uncategorized
src//performance_history.cpp,265,100000,"        return 100000;",uncategorized
src//performance_history.cpp,312,10000,"        fallback_threshold = 10000;",uncategorized
src//performance_history.cpp,314,50000,"        fallback_threshold = 50000;",uncategorized
src//gamma.cpp,1218,100,"    if (n_bootstrap < 100) {",iteration_limit
src//system_capabilities.cpp,19,1024,"constexpr size_t BENCHMARK_ARRAY_SIZE = 1024;",uncategorized
src//system_capabilities.cpp,73,1024,"    constexpr size_t array_size = 16 * 1024 * 1024;  // 16MB to exceed cache sizes",uncategorized
src//system_capabilities.cpp,73,1024,"    constexpr size_t array_size = 16 * 1024 * 1024;  // 16MB to exceed cache sizes",uncategorized
src//system_capabilities.cpp,109,1600,"        return 25.0;  // Reasonable fallback for DDR3-1600 dual channel",uncategorized
src//system_capabilities.cpp,135,1024,"    l1_cache_size_ = 32 * 1024;        // 32KB typical L1",uncategorized
src//system_capabilities.cpp,136,256,"    l2_cache_size_ = 256 * 1024;       // 256KB typical L2",uncategorized
src//system_capabilities.cpp,136,1024,"    l2_cache_size_ = 256 * 1024;       // 256KB typical L2",uncategorized
src//system_capabilities.cpp,137,1024,"    l3_cache_size_ = 8 * 1024 * 1024;  // 8MB typical L3",uncategorized
src//system_capabilities.cpp,137,1024,"    l3_cache_size_ = 8 * 1024 * 1024;  // 8MB typical L3",uncategorized
src//platform_constants_impl.cpp,342,512,"            return 8;  // AVX-512: 8 doubles per register",uncategorized
src//platform_constants_impl.cpp,369,512,"        return stats::arch::cpu::intel::CACHE_LINE_SIZE;  // AVX-512: Use full cache line alignment",uncategorized
src//platform_constants_impl.cpp,435,256,"        return 256;",uncategorized
src//platform_constants_impl.cpp,437,384,"        return 384;",uncategorized
src//platform_constants_impl.cpp,439,512,"        return 512;",uncategorized
src//platform_constants_impl.cpp,441,768,"        return 768;",uncategorized
src//platform_constants_impl.cpp,443,1024,"        return 1024;",uncategorized
src//platform_constants_impl.cpp,445,2048,"        return 2048;  // Higher threshold for scalar operations",uncategorized
src//platform_constants_impl.cpp,481,4096,"                                     : 4096;  // Use half of L1",uncategorized
src//platform_constants_impl.cpp,484,32768,"        features.l2_cache_size > 0 ? (features.l2_cache_size / sizeof(double)) / detail::TWO_INT : 32768;",uncategorized
src//platform_constants_impl.cpp,487,262144,"        features.l3_cache_size > 0 ? (features.l3_cache_size / sizeof(double)) / detail::FOUR_INT : 262144;",uncategorized
src//cpu_vendor_detection.cpp,44,128,"        return apple_silicon::CACHE_LINE_SIZE;  // 128 bytes",uncategorized
src//cpu_vendor_detection.cpp,66,32768,"    return 32768;  // Default to 32KB",uncategorized
src//discrete.cpp,1599,1000000,"    if (range > 1000000) {  // 1M elements max (4MB memory)",uncategorized
src//discrete.cpp,1604,10000,"    if (range > 10000) {  // Warning for large ranges",uncategorized
src//benchmark.cpp,606,1024,"    if (cpuFeatures.l3_cache_size >= 16 * 1024 * 1024) {  // 16MB+",uncategorized
src//benchmark.cpp,606,1024,"    if (cpuFeatures.l3_cache_size >= 16 * 1024 * 1024) {  // 16MB+",uncategorized
src//benchmark.cpp,609,1024,"    } else if (cpuFeatures.l3_cache_size <= 4 * 1024 * 1024) {  // 4MB or less",uncategorized
src//benchmark.cpp,609,1024,"    } else if (cpuFeatures.l3_cache_size <= 4 * 1024 * 1024) {  // 4MB or less",uncategorized
src//cpu_detection.cpp,692,512,"        return 8;  // 512 bits / 64 bits per double",uncategorized
src//cpu_detection.cpp,694,256,"        return 4;  // 256 bits / 64 bits per double",uncategorized
src//cpu_detection.cpp,696,128,"        return 2;  // 128 bits / 64 bits per double",uncategorized
src//cpu_detection.cpp,698,128,"        return 2;  // 128 bits / 64 bits per double",uncategorized
src//cpu_detection.cpp,706,512,"        return 16;  // 512 bits / 32 bits per float",uncategorized
src//cpu_detection.cpp,708,256,"        return 8;  // 256 bits / 32 bits per float",uncategorized
src//cpu_detection.cpp,710,128,"        return 4;  // 128 bits / 32 bits per float",uncategorized
src//cpu_detection.cpp,712,128,"        return 4;  // 128 bits / 32 bits per float",uncategorized
src//cpu_detection.cpp,720,512,"        return 64;  // 512 bits = 64 bytes",uncategorized
src//cpu_detection.cpp,722,256,"        return 32;  // 256 bits = 32 bytes",uncategorized
src//cpu_detection.cpp,724,128,"        return 16;  // 128 bits = 16 bytes",uncategorized
src//cpu_detection.cpp,953,142,"           (features.model == 142 ||",uncategorized
src//cpu_detection.cpp,954,158,"            features.model == 158  // Kaby Lake-U/Y: 142  Coffee Lake-S: 158",uncategorized
src//cpu_detection.cpp,954,142,"            features.model == 158  // Kaby Lake-U/Y: 142  Coffee Lake-S: 158",uncategorized
src//cpu_detection.cpp,954,158,"            features.model == 158  // Kaby Lake-U/Y: 142  Coffee Lake-S: 158",uncategorized
src//cpu_detection.cpp,955,165,"            || features.model == 165 ||",uncategorized
src//cpu_detection.cpp,956,166,"            features.model == 166);  // Coffee Lake-H: 165  Cannon Lake: 166",uncategorized
src//cpu_detection.cpp,956,165,"            features.model == 166);  // Coffee Lake-H: 165  Cannon Lake: 166",uncategorized
src//cpu_detection.cpp,956,166,"            features.model == 166);  // Coffee Lake-H: 165  Cannon Lake: 166",uncategorized
src//cpu_detection.cpp,963,512,"           (features.avx512f                                      // Any CPU with AVX-512 is modern",uncategorized
src//cpu_detection.cpp,964,125,"            || (features.family == 6 && features.model >= 125));  // Ice Lake and newer models",uncategorized
src//parallel_thresholds.cpp,20,128,"    profile.simd_width_elements = 2;  // NEON 128-bit",uncategorized
src//parallel_thresholds.cpp,22,1024,"    profile.base_parallel_threshold = 1024;",uncategorized
src//parallel_thresholds.cpp,26,256,"    profile.simd_width_elements = 4;  // AVX2 256-bit / 4 doubles",uncategorized
src//parallel_thresholds.cpp,28,2048,"    profile.base_parallel_threshold = 2048;",uncategorized
src//parallel_thresholds.cpp,32,128,"    profile.simd_width_elements = 2;  // SSE 128-bit / 2 doubles",uncategorized
src//parallel_thresholds.cpp,34,4096,"    profile.base_parallel_threshold = 4096;",uncategorized
src//parallel_thresholds.cpp,40,8192,"    profile.base_parallel_threshold = 8192;",uncategorized
src//parallel_thresholds.cpp,47,1024,"        profile.l3_cache_size_elements = 2 * 1024 * 1024;  // 2MB worth of doubles",uncategorized
src//parallel_thresholds.cpp,47,1024,"        profile.l3_cache_size_elements = 2 * 1024 * 1024;  // 2MB worth of doubles",uncategorized
src//parallel_thresholds.cpp,113,16384,"            threshold = 16384;",uncategorized
src//parallel_thresholds.cpp,117,16384,"            threshold = 16384;",uncategorized
src//parallel_thresholds.cpp,121,8192,"            threshold = 8192;",uncategorized
src//parallel_thresholds.cpp,125,1048576,"            threshold = 1048576;",uncategorized
src//parallel_thresholds.cpp,127,32768,"            threshold = 32768;",uncategorized
src//parallel_thresholds.cpp,129,65536,"            threshold = 65536;",uncategorized
src//parallel_thresholds.cpp,133,32768,"            threshold = 32768;",uncategorized
src//parallel_thresholds.cpp,139,128,"            threshold = 128;",uncategorized
src//parallel_thresholds.cpp,151,256,"            threshold = 256;",uncategorized
src//parallel_thresholds.cpp,157,256,"            threshold = 256;",uncategorized
src//parallel_thresholds.cpp,161,4096,"            threshold = 4096;",uncategorized
src//parallel_thresholds.cpp,163,8192,"            threshold = 8192;",uncategorized
src//parallel_thresholds.cpp,165,512,"            threshold = 512;",uncategorized
src//parallel_thresholds.cpp,169,4096,"            threshold = 4096;",uncategorized
src//parallel_thresholds.cpp,173,256,"            threshold = 256;",uncategorized
src//parallel_thresholds.cpp,175,512,"            threshold = 512;",uncategorized
src//parallel_thresholds.cpp,177,128,"            threshold = 128;",uncategorized
src//parallel_thresholds.cpp,181,256,"            threshold = 256;",uncategorized
src//parallel_thresholds.cpp,186,8192,"            threshold = 8192;",uncategorized
src//parallel_thresholds.cpp,188,4096,"            threshold = 4096;",uncategorized
src//parallel_thresholds.cpp,190,16384,"            threshold = 16384;",uncategorized
src//parallel_thresholds.cpp,192,8192,"            threshold = 8192;",uncategorized
src//parallel_thresholds.cpp,194,8192,"            threshold = 8192;  // Default for generic operations",uncategorized
src//poisson.cpp,2969,170,"    if (n > 170)",uncategorized
src//simd_avx512.cpp,19,512,"#include <immintrin.h>  // AVX-512 intrinsics",uncategorized
src//performance_dispatcher.cpp,251,500,"            thresholds.parallel_min = 500;  // Powerful SIMD reduces parallel threshold",iteration_limit
src//performance_dispatcher.cpp,252,8000,"            thresholds.work_stealing_min = 8000;",uncategorized
src//performance_dispatcher.cpp,253,32000,"            thresholds.gpu_accelerated_min = 32000;",uncategorized
src//performance_dispatcher.cpp,257,10000,"            thresholds.work_stealing_min = 10000;",uncategorized
src//performance_dispatcher.cpp,258,50000,"            thresholds.gpu_accelerated_min = 50000;",uncategorized
src//performance_dispatcher.cpp,262,50000,"            thresholds.work_stealing_min = 50000;",uncategorized
src//performance_dispatcher.cpp,263,200000,"            thresholds.gpu_accelerated_min = 200000;",uncategorized
src//performance_dispatcher.cpp,266,2000,"            thresholds.parallel_min = 2000;  // Older architecture  conservative",uncategorized
src//performance_dispatcher.cpp,267,20000,"            thresholds.work_stealing_min = 20000;",uncategorized
src//performance_dispatcher.cpp,268,100000,"            thresholds.gpu_accelerated_min = 100000;",uncategorized
src//performance_dispatcher.cpp,271,1500,"            thresholds.parallel_min = 1500;  // ARM characteristics",uncategorized
src//performance_dispatcher.cpp,272,15000,"            thresholds.work_stealing_min = 15000;",uncategorized
src//performance_dispatcher.cpp,273,75000,"            thresholds.gpu_accelerated_min = 75000;",uncategorized
src//performance_dispatcher.cpp,278,500,"            thresholds.parallel_min = 500;   // Lower threshold since SIMD unavailable",iteration_limit
src//performance_dispatcher.cpp,280,25000,"            thresholds.gpu_accelerated_min = 25000;",uncategorized
src//performance_dispatcher.cpp,493,10000,"    gpu_accelerated_min = std::max(gpu_accelerated_min  static_cast<size_t>(10000));",uncategorized
src//validation.cpp,127,-1259.1392167224028,"        0.99999999999980993   676.5203681218851      -1259.1392167224028 ",uncategorized
src//validation.cpp,128,-176.61502916214059,"        771.32342877765313    -176.61502916214059    12.507343278686905 ",uncategorized
src//gamma.cpp,1039,-1.28,"        p_value = std::exp(-1.28 * modified_stat);",uncategorized
src//gamma.cpp,1041,-1.8,"        p_value = std::exp(-1.8 * modified_stat + 1.5);",uncategorized
src//gamma.cpp,2886,-1,"    result -= z_inv_sq * z_inv_sq * z_inv / 30.0;             // -1/(30z⁵)",uncategorized
src//uniform.cpp,86,-1,"            if (std::try_lock(lock1  lock2) == -1) {",uncategorized
src//uniform.cpp,980,-1.2804,"        p_value = detail::ONE - std::exp(-1.2804 * std::pow(ad_stat  -detail::HALF));",uncategorized
src//uniform.cpp,986,-1.8,"        p_value = std::exp(-1.8 * ad_stat + 0.258);",uncategorized
src//uniform.cpp,1080,-1000.0,"                std::isfinite(log_prob) ? log_prob : -1000.0;  // Penalty for out-of-bounds",uncategorized
src//uniform.cpp,1147,-1000.0,"            std::isfinite(log_prob) ? log_prob : -1000.0;  // Penalty for out-of-bounds",uncategorized
src//uniform.cpp,1186,-1000.0,"            log_likelihood += -1000.0;",uncategorized
src//system_capabilities.cpp,109,-1600,"        return 25.0;  // Reasonable fallback for DDR3-1600 dual channel",uncategorized
src//discrete.cpp,138,-1,"            if (std::try_lock(lock1  lock2) == -1) {",uncategorized
src//discrete.cpp,1159,-1.2337,"        p_value = detail::ONE - std::exp(-1.2337 * std::pow(ad_statistic  -detail::ONE) + detail::ONE);",uncategorized
src//gaussian.cpp,92,-1,"            if (std::try_lock(lock1  lock2) == -1) {",uncategorized
src//poisson.cpp,83,-1,"            if (std::try_lock(lock1  lock2) == -1) {",uncategorized
src//poisson.cpp,1035,-1,"            p_value += detail::TWO * std::pow(-1  k) * std::exp(-detail::TWO * k * k * lambda_ks * lambda_ks);",uncategorized
src//poisson.cpp,1076,-1.2337,"        p_value = detail::ONE - std::exp(-1.2337 * std::pow(ad_statistic  -detail::ONE) + detail::ONE);",uncategorized
src//poisson.cpp,1171,-1,"    const int df = static_cast<int>(num_groups) - 1 - 1;  // -1 for estimated lambda",uncategorized
src//exponential.cpp,87,-1,"            if (std::try_lock(lock1  lock2) == -1) {",uncategorized
src//math_utils.cpp,59,-18.61500062529,"    static const double a1 = -18.61500062529;",uncategorized
src//math_utils.cpp,61,-25.44106049637,"    static const double a3 = -25.44106049637;",uncategorized
src//math_utils.cpp,63,-8.47351093090,"    static const double b0 = -8.47351093090;",uncategorized
src//math_utils.cpp,65,-21.06224101826,"    static const double b2 = -21.06224101826;",uncategorized
